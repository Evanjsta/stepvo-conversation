defmodule Stepvo.Repo.Migrations.AddTokensTable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:votes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :value, :bigint, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, :uuid, null: false
      add :comment_id, :uuid, null: false
    end

    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:votes) do
      modify :user_id, references(:users, column: :id, name: "votes_user_id_fkey", type: :uuid)
    end

    alter table(:users) do
      add :email, :text, null: false
      add :username, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create unique_index(:users, [:username], name: "users_unique_username_index")

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:comments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:votes) do
      modify :comment_id,
             references(:comments, column: :id, name: "votes_comment_id_fkey", type: :uuid)
    end

    create unique_index(:votes, [:user_id, :comment_id],
             name: "votes_unique_user_comment_vote_index"
           )

    alter table(:comments) do
      add :content, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, references(:users, column: :id, name: "comments_user_id_fkey", type: :uuid),
        null: false

      add :parent_comment_id,
          references(:comments, column: :id, name: "comments_parent_comment_id_fkey", type: :uuid)
    end
  end

  def down do
    drop constraint(:comments, "comments_user_id_fkey")

    drop constraint(:comments, "comments_parent_comment_id_fkey")

    alter table(:comments) do
      remove :parent_comment_id
      remove :user_id
      remove :updated_at
      remove :inserted_at
      remove :content
    end

    drop_if_exists unique_index(:votes, [:user_id, :comment_id],
                     name: "votes_unique_user_comment_vote_index"
                   )

    drop constraint(:votes, "votes_comment_id_fkey")

    alter table(:votes) do
      modify :comment_id, :uuid
    end

    drop table(:comments)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:username], name: "users_unique_username_index")

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    alter table(:users) do
      remove :updated_at
      remove :inserted_at
      remove :username
      remove :email
    end

    drop constraint(:votes, "votes_user_id_fkey")

    alter table(:votes) do
      modify :user_id, :uuid
    end

    drop table(:users)

    drop table(:votes)
  end
end
